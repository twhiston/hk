var {{ if .Parent }}{{ .Parent }}{{ end }}{{ .ID }}Cmd = &cobra.Command{
	Use:   "{{ .ID }}",
	Short: "{{ .Description }}",
	{{ if .Aliases -}}
	Aliases: []string{ "{{ StringsJoin .Aliases "\", \"" }}" },
	{{ end -}}
	Long:  `{{ .Long }}`,
	{{ if .Path -}}
	Run: func(cmd *cobra.Command, args []string) {

	    {{ if .Index.Required }}
	    if len(args) < ({{ .Index.Arg }}+1) {
	        HandleError(errors.New("argument {{ .Index.Arg }} is required for this command"))
	    }
	    {{ end }}

		api := getAPI()
		{{ if .ResponseType }}
		resp := new({{ .ResponseType }})
		{{ end }}

		{{ if .PayloadType }}
		payload := new({{ .PayloadType }})
		{{ end }}

		{{- if and (ne .Type "post") (and (ne .Type "patch") (ne .Type "put")) }}
		querystring := make(map[string]string)
		{{ range $k, $v := .Params -}}
        value, e := cmd.{{ if $v.Persistent }}Persistent{{ end }}Flags().Get{{ $v.Type | Title }}("{{ $v.Name }}")
        HandleError(e)
        querystring["{{ $v.Name }}"] = value
        {{ end }}
         if impersonate != "" {
            querystring["user_id"] = impersonate
         }
		{{- end }}

		{{ if .ParameterHandler }}
		pe := {{ .ParameterHandler }}(&querystring)
		HandleError(pe)
		{{ end }}

		{{ if .PostDataHandler -}}
        // Payload renderer must have signature (cmd *cobra.Command, args []string, payload *{{ .PayloadType }}) (*{{ .PayloadType }}, error)
        err := {{ .PostDataHandler}}(cmd, args, payload)
        HandleError(err)
        {{ end -}}
        res := api.Res("{{ .Path }}" {{ if .ResponseType }}, resp{{ end }})
        {{- if or (eq .Type "post") (or (eq .Type "patch") (eq .Type "put") ) }}
        if impersonate != "" {
            querystring := make(map[string]string, 1)
            querystring["user_id"] = impersonate
            res.SetPayload(querystring)
        }
        {{- end }}
		{{ if  gt .ExpectedStatus 0 }}r{{ else }}_{{ end }}, err := res.{{ if .Index.Required }}Id(args[{{ .Index.Arg }}]).{{ end }}{{ .Type | Title }}({{ if and (ne .Type "post") (and (ne .Type "patch") (ne .Type "put")) }}querystring{{ end }}{{ if .PayloadType }}payload{{ end }})
		HandleError(err)

		{{ if gt .ExpectedStatus 0 }}
                if r.Raw.StatusCode != {{ .ExpectedStatus }} {
                    defer deferredBodyClose(r)
                	bodyBytes, err := ioutil.ReadAll(r.Raw.Body)
                	HandleError(err)
                	HandleError(errors.New(string(bodyBytes)))
                }
        {{ end }}

		{{ if .HasResponse -}}
		{{- if .ArrayResponse }}
		printArrayResponse(*resp)
		{{- else }}
		printResponse(*resp)
		{{ end }}
		{{- end }}

	},
	{{ end -}}
}
