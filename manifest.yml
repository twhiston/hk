import:
  - "github.com/spf13/cobra"
  - "errors"
  - "io/ioutil"
commands:
    - id: overview
      aliases:
       - stats
      type: get
      description: Get your current overview
      long: Returns the /overview endpoint which details your current overtime, percent worked etc....
      responseType: StatsResponse
      path: overview
      hasResponse: true
      expectedStatus: 200

### TIMER
    - id: timer
      description: Control the timer
      long: Start, stop, delete and view timers with timer subcommands
      params:
        - name: id
          type: int
          usage: enter the id of the timer payload, should correspond to a timer type ID, default 1
          value: 1
          persistent: true
        - name: project
          type: int
          usage: optionally enter the id of the project
          value: 0
          persistent: true
        - name: start
          type: string
          usage: enter the start time in natural language (eg 15 minutes ago, 14:30)
          value: "\"\""
          persistent: true
        - name: note
          type: string
          usage: "optional note to add to timer"
          value: "\"\""
          persistent: true

    - id: get
      type: get
      parent: timer
      description: Shows the current timer
      long: Gets the current timer and displays it's details
      responseType: TimerResponse
      path: timer
      hasResponse: true
      expectedStatus: 200

    - id: types
      type: get
      parent: timer
      description: Get the types of timer available
      long: Returns the possible timer options for your hakuna instance, use these id's with timer commands
      responseType: TimerTypesResponse
      path: time_types
      hasResponse: true
      array: true
      expectedStatus: 200

    - id: start
      type: post
      parent: timer
      description: Starts a new timer
      long: Creates a new running timer starting from now
      responseType: TimerResponse
      path: timer
      payloadType: TimerStartPayload
      postDataHandler: fillStartTimerData
      expectedStatus: 201

    - id: stop
      type: put
      parent: timer
      description: Stop the currently running timer
      responseType: TimeEntryResponse
      path: timer
      payloadType: TimerStopPayload
      hasResponse: true
      expectedStatus: 200

    - id: cancel
      type: delete
      parent: timer
      description: Cancel a timer
      long: Deletes the currently running timer
      path: timer
      expectedStatus: 205

### TIME

    - id: time
      description: Manipulate time entries
      long: Subcommands for time allow you to list or manipulate time entries
      params:
        - name: start
          type: string
          usage: enter the start date in natural language (eg Jan 15th, last Wednesday)
          value: "\"\""
          persistent: true
        - name: end
          type: string
          usage: enter the start date in natural language (eg Jan 15th, last Wednesday)
          value: "\"\""
          persistent: true
        - name: time-id
          type: int
          usage: enter the time type id. You can get these with the types command, defaults to 1 which is usually Arbeit
          value: 1
          persistent: true
        - name: project
          type: int
          usage: optional project id
          value: 0
          persistent: true
        - name: note
          type: string
          usage: optional note to add to the entry
          value: "\"\""
          persistent: true

    - id: list
      type: get
      parent: time
      description: List time entries
      long: List time entries for a specific date
      responseType: TimeEntryResponseArray
      path: time_entries
      hasResponse: true
      array: true
      parameterHandler: timeParamHandler
      expectedStatus: 200
      params:
        - name: date
          type: string
          usage: enter the date in natural language (eg Jan 15th, last Wednesday, 01/12/18)
          value: "\"\""
          short: d

    - id: get
      type: get
      parent: time
      description: Get a time entry specified by an id
      long: Returns a specific time entry, which is given as an argument to the command
      responseType: TimeEntryResponse
      path: time_entries
      hasResponse: true
      expectedStatus: 200
      index:
        arg: 0
        required: true

    - id: create
      type: post
      parent: time
      description: Create a time entry in the calendar
      long: Starts, Ends and the timer type ID are required to create a new timer entry
      path: time_entries
      payloadType: TimeEntryPayload
      responseType: TimeEntryResponse
      postDataHandler: fillRequiredTimeEntryData
      hasResponse: true
      expectedStatus: 201

    - id: update
      type: patch
      parent: time
      description: Update a time entry
      long: Updates an entry by id, which is required
      path: time_entries
      payloadType: TimeEntryPayload
      responseType: TimeEntryResponse
      postDataHandler: fillOptionalTimeEntryData
      expectedStatus: 200
      index:
        arg: 0
        required: true

    - id: delete
      type: delete
      parent: time
      description: Delete a time
      long: Deletes a time via it's id.
      path: time_entries
      expectedStatus: 204
      index:
        arg: 0
        required: true

### OTHER

    - id: projects
      type: get
      array: true
      description: Get a list of all projects
      responseType: ProjectResponse
      path: projects
      expectedStatus: 200
      hasResponse: true
      array: true

    - id: organization
      aliases:
        - organisation
        - org
      type: get
      description: Get organization details
      long: Returns the details of the organization as authorized by your token
      path: organization/status
      responseType: OrgResponse
      hasResponse: true
      array: true
      expectedStatus: 200

    - id: absences
      type: get
      description: Get absences for a specific year
      long: If no year is supplied it will default to the current year
      responseType: AbsenceResponseArray
      array: true
      path: absences
      parameterHandler: absenceParamHandler
      hasResponse: true
      expectedStatus: 200
      params:
        - name: year
          type: string
          usage: the year to look for
          value: "\"\""

    - id: users
      type: get
      description: Retrieves all user you can manage (as admin or team leader)
      path: users
      responseType: UserResponse
      hasResponse: true
      expectedStatus: 200
      array: true