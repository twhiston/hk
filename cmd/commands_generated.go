package cmd

// This file was auto generated by the hk code generator
// DO NOT ALTER THIS FILE MANUALLY

import (
 "github.com/spf13/cobra"
 "errors"
 "io/ioutil"
 "github.com/twhiston/clitable"
 
)

// GET COMMANDS

var statsCmd = &cobra.Command{
	Use:   "stats",
	Short: "get your current stats",
	Long:  `returns the /overview endpoint`,
	Run: func(cmd *cobra.Command, args []string) {
		api := GetApi()
		resp := new(StatsResponse)
		
		
		_, err := api.Res("overview", resp).Get()
		HandleError(err)
		
		PrintResponse(*resp)
		
	},
}

var timerCmd = &cobra.Command{
	Use:   "timer",
	Short: "Do things with timers",
	Long:  `Get the current timer, or use subcommands to control timers`,
	Run: func(cmd *cobra.Command, args []string) {
		api := GetApi()
		resp := new(TimerResponse)
		
		
		_, err := api.Res("timer", resp).Get()
		HandleError(err)
		
		PrintResponse(*resp)
		
	},
}

var typesCmd = &cobra.Command{
	Use:   "types",
	Short: "get the types of timer available",
	Long:  `returns the possible timer options for your hakuna instance, use these id's with timer commands`,
	Run: func(cmd *cobra.Command, args []string) {
		api := GetApi()
		resp := new(TimerTypesResponse)
		
		
		_, err := api.Res("time_types", resp).Get()
		HandleError(err)
		
		table := clitable.New()
        for k, v := range *resp {
        	if k == 0 {
        		table.AddRow(getStructTags(v)...)
        	}
        	table.AddRow(getStructVals(v)...)
        }
        table.Print()
	},
}

var projectsCmd = &cobra.Command{
	Use:   "projects",
	Short: "get a list of all projects",
	Long:  ``,
	Run: func(cmd *cobra.Command, args []string) {
		api := GetApi()
		resp := new(ProjectResponse)
		
		
		_, err := api.Res("projects", resp).Get()
		HandleError(err)
		
	},
}

var timeCmd = &cobra.Command{
	Use:   "time",
	Short: "get time entries",
	Long:  `get time entries for a specific date`,
	Run: func(cmd *cobra.Command, args []string) {
		api := GetApi()
		resp := new(TimeEntryResponseArray)
		
		querystring := make(map[string]string, 1)

		value, e := cmd.PersistentFlags().GetString("date")
        HandleError(e)
        querystring["date"] = value
        
		
		pe := TimeParamHandler(&querystring)
		HandleError(pe)
		
		_, err := api.Res("time_entries", resp).Get(querystring)
		HandleError(err)
		
		table := clitable.New()
        for k, v := range *resp {
        	if k == 0 {
        		table.AddRow(getStructTags(v)...)
        	}
        	table.AddRow(getStructVals(v)...)
        }
        table.Print()
	},
}



// POST COMMANDS

var startCmd = &cobra.Command{
	Use:   "start",
	Short: "Starts a new timer",
	Long:  `Creates a new running timer starting from now`,
	Run: func(cmd *cobra.Command, args []string) {
		api := GetApi()
		resp := new(TimerResponse)
		payload := new(TimerStartPayload)
		// Payload renderer must have signature (cmd *cobra.Command, args []string, payload *TimerStartPayload) (*TimerStartPayload, error)
        err := FillStartTimerData(cmd, args, payload)
        HandleError(err)
        r, err :=  api.Res("timer", resp).Post(payload)
		HandleError(err)
		if r.Raw.StatusCode != 201 {
            defer r.Raw.Body.Close()
        	bodyBytes, err := ioutil.ReadAll(r.Raw.Body)
        	HandleError(err)
        	HandleError(errors.New(string(bodyBytes)))
        }
		
	},
}
var createCmd = &cobra.Command{
	Use:   "create",
	Short: "Create a time entry in the calendar",
	Long:  ``,
	Run: func(cmd *cobra.Command, args []string) {
		api := GetApi()
		resp := new(TimeEntryResponse)
		payload := new(TimeEntryPayload)
		// Payload renderer must have signature (cmd *cobra.Command, args []string, payload *TimeEntryPayload) (*TimeEntryPayload, error)
        err := FillTimeEntryData(cmd, args, payload)
        HandleError(err)
        r, err :=  api.Res("time_entries", resp).Post(payload)
		HandleError(err)
		if r.Raw.StatusCode != 201 {
            defer r.Raw.Body.Close()
        	bodyBytes, err := ioutil.ReadAll(r.Raw.Body)
        	HandleError(err)
        	HandleError(errors.New(string(bodyBytes)))
        }
		PrintResponse(*resp)
        
	},
}


// PUT COMMANDS

var stopCmd = &cobra.Command{
	Use:   "stop",
	Short: "stop a timer",
	Long:  `stops a timer and optionally sets a stop time`,
	Run: func(cmd *cobra.Command, args []string) {
		api := GetApi()
		resp := new(TimeEntryResponse)
		payload := new(TimerStopPayload)
		
		r, err :=  api.Res("timer", resp).Put(payload)
		HandleError(err)
		if r.Raw.StatusCode != 200 {
            defer r.Raw.Body.Close()
        	bodyBytes, err := ioutil.ReadAll(r.Raw.Body)
        	HandleError(err)
        	HandleError(errors.New(string(bodyBytes)))
        }
		PrintResponse(*resp)
        
	},
}


// DELETE COMMANDS

var cancelCmd = &cobra.Command{
	Use:   "cancel",
	Short: "cancel a timer",
	Long:  `deletes the currently running timer`,
	Run: func(cmd *cobra.Command, args []string) {
		api := GetApi()
		r, _ :=  api.Res("timer").Delete()
		if r.Raw.StatusCode != 205 {
            defer r.Raw.Body.Close()
        	bodyBytes, err := ioutil.ReadAll(r.Raw.Body)
        	HandleError(err)
        	HandleError(errors.New(string(bodyBytes)))
        }
        
	},
}




//Initialize commands and options
func init() {
    
    RootCmd.AddCommand(statsCmd)
    RootCmd.AddCommand(timerCmd)
    timerCmd.AddCommand(typesCmd)

    RootCmd.AddCommand(projectsCmd)
    RootCmd.AddCommand(timeCmd)
    timeCmd.PersistentFlags().StringP("date", "d", "", "enter the date that you want to look for details of. If left blank will use todays date")



    timerCmd.AddCommand(startCmd)

    timeCmd.AddCommand(createCmd)

    createCmd.Flags().String("start", "", "enter the start date in the format yyyy-dd-mmThh:mm")

    createCmd.Flags().String("end", "", "enter the start date in the format yyyy-dd-mmThh:mm")

    createCmd.Flags().Int("time-id", 1, "enter the time type id. You can get these with the types command, defaults to 1 which is usually Arbeit")

    createCmd.Flags().Int("project-id", 0, "optional project id")

    createCmd.Flags().String("note", "", "optional note to add to the entry")



    timerCmd.AddCommand(stopCmd)



    timerCmd.AddCommand(cancelCmd)


}

